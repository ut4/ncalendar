/*
 nullcalendar v0.1.0
 https://github.com/ut4/ncalendar
 @license BSD-3-Clause
*/
'use strict';(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory():typeof define==="function"&&define.amd?define(factory):global.nullcalendar=factory()})(this,function(){if(window.Inferno){window.React=Inferno;window.React.ON_INPUT="onInput";window.ReactDOM=Inferno}else if(window.preact){window.React=preact;window.React.ON_INPUT="onInput";window.ReactDOM={render:(component,containerNode,replaceNode)=>preact.render(component,containerNode,replaceNode)._component}}else if(window.React)window.React.ON_INPUT=
"onChange";else throw new Error("nullcalendar tarvitsee Inferno, preact, tai React'n toimiakseen");window.$el=React.createElement;class Modal extends React.Component{constructor(props){super(props);this.state={contentConstruct:null}}open(construct){this.setState({contentConstruct:construct})}close(){this.setState({contentConstruct:null})}render(){return this.state.contentConstruct?$el("div",{className:"modal"},$el("div",{className:"modal-content"},$el(this.state.contentConstruct.Component,Object.assign({},
this.state.contentConstruct.props,{closeModal:()=>this.close()})))):null}}var Constants=Object.freeze({VIEW_DAY:"day",VIEW_WEEK:"week",VIEW_MONTH:"month",VIEW_DEFAULT:"week",HOURS_IN_DAY:24,DAYS_IN_WEEK:7});const titleFormatters={[Constants.VIEW_DAY]:(dateCursorRange)=>{return"%1, %2".replace("%1",Intl.DateTimeFormat("fi",{day:"numeric",month:"long"}).format(dateCursorRange.start)).replace("%2",dateCursorRange.start.getFullYear())},[Constants.VIEW_WEEK]:(dateCursorRange)=>{return"%1 %2 - %3 %4".replace("%1",
Intl.DateTimeFormat("fi",{month:"short"}).format(dateCursorRange.start)).replace("%2",dateCursorRange.start.getDate()).replace("%3",dateCursorRange.end.getDate()).replace("%4",dateCursorRange.start.getFullYear())},[Constants.VIEW_MONTH]:(dateCursorRange)=>{return Intl.DateTimeFormat("fi",{month:"long",year:"numeric"}).format(dateCursorRange.start)}};class Toolbar extends React.Component{constructor(props){super(props)}render(){const ctrl=this.props.calendarController;return $el("div",{className:"toolbar"},
$el("div",{className:"row"},$el("div",{className:"col"},$el("button",{onClick:()=>ctrl.dateCursor.prev()},"<"),$el("button",{onClick:()=>ctrl.dateCursor.next()},">"),$el("button",{onClick:()=>ctrl.dateCursor.reset()},"T\u00e4n\u00e4\u00e4n")),$el("div",{className:"col"},$el("h2",null,(this.props.titleFormatter||titleFormatters[ctrl.currentView])(ctrl.dateCursor.range))),$el("div",{className:"col"},$el("button",{onClick:()=>{ctrl.changeView(Constants.VIEW_MONTH)}},"Kuukausi"),$el("button",{onClick:()=>
{ctrl.changeView(Constants.VIEW_WEEK)}},"Viikko"),$el("button",{onClick:()=>{ctrl.changeView(Constants.VIEW_DAY)}},"P\u00e4iv\u00e4"))))}}class ContentLayerFactory{constructor(){this.registrar={}}register(name,ConstructorOrFactory){if(this.isRegistered(name))throw new Error(`Layer "${name}" on jo rekister\u00f6ity.`);if(typeof ConstructorOrFactory!=="function")throw new Error("Rekister\u00f6it\u00e4v\u00e4 itemi tulisi olla luokka, tai funktio.");this.registrar[name]=ConstructorOrFactory}isRegistered(name){return this.registrar.hasOwnProperty(name)}make(name,
args){const item=this.registrar[name];if(!item)throw new Error(`Layeria "${name}" ei ole rekister\u00f6ity.`);if(!isValidContentLayer(item.prototype)){const providedLayer=item(...args);if(!isValidContentLayer(providedLayer))throw new Error("Sis\u00e4lt\u00f6kerros-factory:n palauttama instanssi "+' tulisi implementoida metodit "load", ja "decorateCell"');return providedLayer}else return new item(...args)}}function isValidContentLayer(obj){return obj&&typeof obj.load==="function"&&typeof obj.decorateCell===
"function"}const EMPTY_WEEK=Array.from(Array(7));class DateUtils{getWeekNumber(date){const d=new Date(date);d.setHours(0,0,0,0);d.setDate(d.getDate()+4-(d.getDay()||7));return Math.ceil(((d-new Date(d.getFullYear(),0,1))/864E5+1)/7)}getEstimatedFirstDayOfWeek(){return(new Date(2017,5,5,12,0,0,0)).getDay()}getStartOfWeek(date){const firstDay=this.getEstimatedFirstDayOfWeek();const d=new Date(date);d.setDate(date.getDate()-(7+date.getDay()-firstDay)%7);return d}getFormattedWeekDays(date,format){const d=
this.getStartOfWeek(date);return EMPTY_WEEK.map(()=>{const formatted=format.format(d);d.setDate(d.getDate()+1);return formatted})}getStartOfDay(date){const start=new Date(date);start.setHours(0);start.setMinutes(0);start.setSeconds(0);start.setMilliseconds(1);return start}getEndOfDay(date){const end=new Date(date);end.setHours(23);end.setMinutes(59);end.setSeconds(59);end.setMilliseconds(999);return end}formatHour(hour){return(hour<10?"0":"")+hour+":00"}format(options,date){return Intl.DateTimeFormat("fi",
options).format(date)}}const cache={};const cachify=(key,fn)=>{if(!cache.hasOwnProperty(key))cache[key]=fn();return cache[key]};var ioc={dateUtils:()=>{return cachify("dateUtils",()=>new DateUtils)},contentLayerFactory:()=>{return cachify("contentLayerFactory",()=>new ContentLayerFactory)}};const dateUtils=ioc.dateUtils();class DayHeader extends React.Component{constructor(props){super(props)}render(){return $el("div",{className:"header"},$el("div",{className:"row"},$el("div",{className:"col"},$el("div",
{className:"cell"},"")),$el("div",{className:"col"},$el("div",{className:"cell"},this.formatDay(this.props.dateCursor.range.start)))))}formatDay(cursorStart){return Intl.DateTimeFormat("fi",{weekday:"long"}).format(cursorStart)}}class WeekHeader extends React.Component{constructor(props){super(props);this.SHORT_DAY_NAMES=dateUtils.getFormattedWeekDays(this.props.dateCursor.range.start,Intl.DateTimeFormat("fi",{weekday:"short"}))}render(){return $el("div",{className:"header"},$el("div",{className:"row"},
[""].concat(this.SHORT_DAY_NAMES).map((content)=>$el("div",{key:content,className:"col"},$el("div",{className:"cell"},content)))))}}class MonthHeader extends React.Component{constructor(props){super(props);this.SHORT_DAY_NAMES=dateUtils.getFormattedWeekDays(this.props.dateCursor.range.start,Intl.DateTimeFormat("fi",{weekday:"long"}))}render(){return $el("div",{className:"header"},$el("div",{className:"row"},[""].concat(this.SHORT_DAY_NAMES).map((weekDay)=>$el("div",{key:weekDay,className:"col"},$el("div",
{className:"cell"},weekDay)))))}}var Header={[Constants.VIEW_DAY]:DayHeader,[Constants.VIEW_WEEK]:WeekHeader,[Constants.VIEW_MONTH]:MonthHeader};const HOURS_ARRAY=Array.from(Array(Constants.HOURS_IN_DAY).keys());const LoadType=Object.freeze({INITIAL:"initial",NAVIGATION:"navigation",VIEW_CHANGE:"view-change"});class Content extends React.Component{constructor(props){super(props);const selectedContentLayers=this.props.calendarController.settings.contentLayers;this.hasAsyncContent=selectedContentLayers.length>
0;this.state=!this.hasAsyncContent?{}:{loading:true};if(this.hasAsyncContent){const contentLayerFactory=ioc.contentLayerFactory();this.contentLayers=selectedContentLayers.map((name)=>contentLayerFactory.make(name,[this.newController(),this.props.calendarController]));this.loadAsyncContent(LoadType.INITIAL)}}resetGrid(){return this.props.grid.map((rows)=>rows.map((cell)=>{if(cell&&!(cell instanceof ImmutableCell)){cell.children=[];cell.clickHandlers=[]}}))}componentWillReceiveProps(props){if(this.hasAsyncContent){this.setState({loading:true});
this.loadAsyncContent(props.currentView===this.props.currentView?LoadType.NAVIGATION:LoadType.VIEW_CHANGE)}}shouldComponentUpdate(_,state){return!state.hasOwnProperty("loading")||state.loading!==true}loadAsyncContent(loadType){return Promise.all(this.contentLayers.map((l)=>l.load(loadType))).then(()=>{this.applyAsyncContent();this.setState({loading:false})})}applyAsyncContent(){this.resetGrid();this.contentLayers.forEach((layer)=>{this.props.grid.forEach((row)=>{row.forEach((cell)=>{cell instanceof
Cell&&layer.decorateCell(cell)})})})}newCell(cell,key){let content;if(!cell)content="";else if(!cell.children||!cell.children.length)content=cell.content;else content=this.newTitledContent(cell);const attrs={className:"cell"};if(cell&&cell.clickHandlers&&cell.clickHandlers.length)attrs.onClick=(e)=>{if(e.which&&e.which!==1)return;cell.clickHandlers.forEach((fn)=>fn(cell,e))};return $el("div",{className:"col"+(cell&&cell.isCurrentDay?" current":""),key},$el("div",attrs,content))}newTitledContent(cell){return $el("div",
null,cell.content,cell.children.map((child,i)=>$el(child.Component,Object.assign({},child.props,{key:i}))))}newController(){return{LoadType,Cell,PlaceholderCell,refresh:()=>{this.applyAsyncContent();this.forceUpdate()}}}render(){return $el("div",{className:"main"},this.props.grid.map((row,rowIndex)=>$el("div",{className:"row",key:rowIndex},row.map((cell,colIndex)=>this.newCell(cell,rowIndex+"."+colIndex)))))}}class Cell{constructor(content,date,isCurrentDay){this.content=content;this.date=date;this.isCurrentDay=
isCurrentDay;this.children=[];this.clickHandlers=[]}}class PlaceholderCell extends Cell{}class ImmutableCell{constructor(content){this.content=content}}class ComponentConstruct{constructor(Component,props){this.Component=Component;this.props=props}}class AbstractViewLayout{constructor(dateCursor){this.dateCursor=dateCursor;this.dateUtils=ioc.dateUtils()}getParts(compactFormShouldBeUsed){return!compactFormShouldBeUsed?this.getFullLayout():this.getCompactLayout()}getFullLayout(){return[new ComponentConstruct(Header[this.getName()],
{dateCursor:this.dateCursor}),new ComponentConstruct(Content,{gridGeneratorFn:()=>this.generateFullGrid()})]}getCompactLayout(){return[null,new ComponentConstruct(Content,{gridGeneratorFn:()=>this.generateCompactGrid()})]}}class DayViewLayout extends AbstractViewLayout{getName(){return Constants.VIEW_DAY}getCompactLayout(){return this.getFullLayout()}generateFullGrid(){const rollingDate=new Date(this.dateCursor.range.start);const isToday=rollingDate.toDateString()===(new Date).toDateString();return HOURS_ARRAY.map((hour)=>
{rollingDate.setHours(hour);return[new ImmutableCell(this.dateUtils.formatHour(hour)),new Cell(null,new Date(rollingDate),isToday)]})}}class WeekViewLayout extends AbstractViewLayout{getName(){return Constants.VIEW_WEEK}generateFullGrid(){return this.markCurrentDayColumn(HOURS_ARRAY.map((hour)=>{const rollingDate=new Date(this.dateCursor.range.start);rollingDate.setHours(hour);const row=[new ImmutableCell(this.dateUtils.formatHour(hour))];while(row.push(new Cell(null,new Date(rollingDate)))<=Constants.DAYS_IN_WEEK)rollingDate.setDate(rollingDate.getDate()+
1);return row}))}generateCompactGrid(){const dayNames=this.dateUtils.getFormattedWeekDays(this.dateCursor.range.start,Intl.DateTimeFormat("fi",{weekday:"long"}));const rollingDate=new Date(this.dateCursor.range.start);const getDateAndMoveToNexDay=()=>{const d=new Date(rollingDate);rollingDate.setDate(rollingDate.getDate()+1);return d};return this.markCurrentDayColumn([[new Cell(dayNames[0],getDateAndMoveToNexDay()),new Cell(dayNames[1],getDateAndMoveToNexDay())],[new Cell(dayNames[2],getDateAndMoveToNexDay()),
new Cell(dayNames[3],getDateAndMoveToNexDay())],[new Cell(dayNames[4],getDateAndMoveToNexDay()),new Cell(dayNames[5],getDateAndMoveToNexDay())],[new Cell(dayNames[6],getDateAndMoveToNexDay()),new PlaceholderCell(null,null)]],true)}markCurrentDayColumn(grid,isCompactView){const now=new Date;if(this.dateUtils.getStartOfWeek(now).toDateString()===this.dateCursor.range.start.toDateString()){const colIndex=now.getDay()||7;if(!isCompactView)grid.forEach((row)=>{row[colIndex].isCurrentDay=true});else grid[Math.round(colIndex/
2)-1][!(colIndex%2)?1:0].isCurrentDay=true}return grid}}const dateUtils$1=ioc.dateUtils();class MonthViewLayout extends AbstractViewLayout{getName(){return Constants.VIEW_MONTH}generateFullGrid(){const d=new Date(this.dateCursor.range.start);const currentDayDateStr=(new Date).toDateString();return this.generateGrid(Constants.DAYS_IN_WEEK,(d)=>new Cell(d.getDate(),new Date(d),d.toDateString()===currentDayDateStr)).map((row)=>{row.unshift(new ImmutableCell(dateUtils$1.getWeekNumber(d)));d.setDate(d.getDate()+
7);return row})}generateCompactGrid(){const dayNames=this.dateUtils.getFormattedWeekDays(this.dateCursor.range.start,Intl.DateTimeFormat("fi",{weekday:"short"}));const currentDayDateStr=(new Date).toDateString();return this.generateGrid(2,(d)=>{const dateAndDayName=d.getDate()+" "+dayNames[(d.getDay()||7)-1];return new Cell(d.getDay()!==1&&d.getDate()>1?dateAndDayName:[dateAndDayName,$el("span",null," / Vk"+dateUtils$1.getWeekNumber(d))],new Date(d),d.toDateString()===currentDayDateStr)})}generateGrid(gridWidth,
formatFn){const startDate=this.dateCursor.range.start;const rollingDate=new Date(startDate);const grid=[];let row=[];if(gridWidth===Constants.DAYS_IN_WEEK){row.length=(startDate.getDay()||7)-1;row.fill(undefined)}while(rollingDate.getMonth()===startDate.getMonth()){row.push(formatFn(rollingDate));if(row.length===gridWidth){grid.push(row);row=[]}rollingDate.setDate(rollingDate.getDate()+1)}if(row.length){while(row.push(undefined)<gridWidth);grid.push(row)}return grid}}var ViewLayouts={[Constants.VIEW_DAY]:DayViewLayout,
[Constants.VIEW_WEEK]:WeekViewLayout,[Constants.VIEW_MONTH]:MonthViewLayout};const dateUtils$2=ioc.dateUtils();const lastRangeCanBeAdapted=(lastSavedRange,startDateOrRangeOfPreviousView)=>lastSavedRange&&!(startDateOrRangeOfPreviousView instanceof Date)&&(lastSavedRange.start>=startDateOrRangeOfPreviousView.start&&lastSavedRange.start<=startDateOrRangeOfPreviousView.end);class DayViewCursorRange{constructor(startDateOrRangeOfPreviousView){if(!lastRangeCanBeAdapted(DayViewCursorRange.lastRange,startDateOrRangeOfPreviousView)){const baseDate=
startDateOrRangeOfPreviousView.start||startDateOrRangeOfPreviousView;this.start=dateUtils$2.getStartOfDay(baseDate);this.end=dateUtils$2.getEndOfDay(baseDate)}else{this.start=DayViewCursorRange.lastRange.start;this.end=DayViewCursorRange.lastRange.end}}goForward(){this.start.setDate(this.start.getDate()+1);this.end.setDate(this.end.getDate()+1)}goBackwards(){this.start.setDate(this.start.getDate()-1);this.end.setDate(this.end.getDate()-1)}}class WeekViewCursorRange{constructor(startDateOrRangeOfPreviousView){if(!lastRangeCanBeAdapted(WeekViewCursorRange.lastRange,
startDateOrRangeOfPreviousView)){const baseDate=startDateOrRangeOfPreviousView.start||startDateOrRangeOfPreviousView;this.start=dateUtils$2.getStartOfWeek(dateUtils$2.getStartOfDay(baseDate));this.end=dateUtils$2.getEndOfDay(this.start);this.end.setDate(this.start.getDate()+6)}else{this.start=WeekViewCursorRange.lastRange.start;this.end=WeekViewCursorRange.lastRange.end}}goForward(){this.start.setDate(this.start.getDate()+Constants.DAYS_IN_WEEK);this.end.setDate(this.end.getDate()+Constants.DAYS_IN_WEEK)}goBackwards(){this.start.setDate(this.start.getDate()-
Constants.DAYS_IN_WEEK);this.end.setDate(this.end.getDate()-Constants.DAYS_IN_WEEK)}}class MonthViewCursorRange{constructor(startDateOrRangeOfPreviousView){const baseDate=startDateOrRangeOfPreviousView.start||startDateOrRangeOfPreviousView;this.start=dateUtils$2.getStartOfDay(baseDate);this.start.setDate(1);this.end=dateUtils$2.getEndOfDay(baseDate);this.end.setMonth(this.start.getMonth()+1);this.end.setDate(0)}goForward(){this.start.setMonth(this.start.getMonth()+1);this.start.setDate(1);this.end.setMonth(this.end.getMonth()+
2);this.end.setDate(0)}goBackwards(){this.start.setMonth(this.start.getMonth()-1);this.start.setDate(1);this.end.setDate(0)}}class DateCursor{constructor(range,subscribeFn){this.range=range;saveRange(this.range);if(subscribeFn)this.notify=subscribeFn}next(){this.range.goForward();saveRange(this.range);this.notify("next")}prev(){this.range.goBackwards();saveRange(this.range);this.notify("prev")}reset(){this.range=new this.range.constructor(new Date);saveRange(this.range);this.notify("reset")}goTo(){this.notify("goTo")}}
function saveRange(range){range.constructor.lastRange={start:new Date(range.start),end:new Date(range.end)}}const cursorRanges={[Constants.VIEW_DAY]:DayViewCursorRange,[Constants.VIEW_WEEK]:WeekViewCursorRange,[Constants.VIEW_MONTH]:MonthViewCursorRange};const dateCursorFactory={newCursor:(viewName,startDateOrRangeFromPreviousView,subscriberFn)=>{return new DateCursor(new cursorRanges[viewName](startDateOrRangeFromPreviousView||new Date),subscriberFn)}};function validateViewKey(viewNameKey){const lookedUpViewName=
Constants["VIEW_"+viewNameKey.toUpperCase()];if(!lookedUpViewName)return'N\u00e4kym\u00e4\u00e4 "'+viewNameKey+'" ei l\u00f6ytynyt'}function validateDefaultDate(candidate){if(!(candidate instanceof Date))return"defaultDate-asetus tulisi olla Date-instanssi"}function validateLayers(candidate){if(!Array.isArray(candidate))return"contentLayers-asetus tulisi olla taulukko"}function validateFormatters(candidate){for(const viewNameKey in candidate){if(typeof candidate[viewNameKey]!=="function")return"titleFormatters["+
viewNameKey+"] pit\u00e4isi olla funktio";const hintForBadViewName=validateViewKey(viewNameKey);if(hintForBadViewName)return hintForBadViewName}}function validateBreakPoint(candidate){if(!Number.isInteger(candidate))return"layoutChangeBreakPoint-asetus tulisi olla kokonaisluku"}function getValidValue(value,validator,defaultValue){if(value===undefined)return defaultValue;const error=validator(value)||null;if(error)throw new Error(error);return value}const getValidViewName=(value)=>getValidValue(value,
validateViewKey,Constants.VIEW_DEFAULT);var settingsFactory=(userSettings)=>({defaultView:getValidViewName(userSettings.defaultView),defaultDate:getValidValue(userSettings.defaultDate,validateDefaultDate,new Date),contentLayers:getValidValue(userSettings.contentLayers,validateLayers,[]),titleFormatters:getValidValue(userSettings.titleFormatters,validateFormatters,{}),layoutChangeBreakPoint:getValidValue(userSettings.layoutChangeBreakPoint,validateBreakPoint,800)});class CalendarLayout extends React.Component{constructor(props){super(props);
this.settings=settingsFactory(this.props.settings||{});this.smallScreenMediaQuery=window.matchMedia(`(max-width:${this.settings.layoutChangeBreakPoint}px)`);const state={dateCursor:this.newDateCursor(this.settings.defaultView)};state.currentView=this.settings.defaultView;state.viewLayout=this.newViewLayout(state.currentView,state.dateCursor);state.isWindowNarrowerThanBreakPoint=this.smallScreenMediaQuery.matches;this.state=state;this.controller=newController(this)}componentWillMount(){this.smallScreenMediaQuery.addListener(this.viewPortListener.bind(this))}getController(){return this.controller}changeView(to){const newView=
getValidViewName(to);if(this.state.currentView===newView)return;const state={dateCursor:this.newDateCursor(newView,this.state.dateCursor.range)};state.currentView=newView;state.viewLayout=this.newViewLayout(newView,state.dateCursor);this.setState(state)}viewPortListener(newMatch){const newIsNarrower=newMatch.matches;if(newIsNarrower!==this.state.isWindowNarrowerThanBreakPoint)this.setState({isWindowNarrowerThanBreakPoint:newIsNarrower})}newDateCursor(viewName,lastViewsRange){return dateCursorFactory.newCursor(viewName,
lastViewsRange||this.settings.defaultDate,()=>{this.setState({dateCursor:this.state.dateCursor})})}newViewLayout(viewName,dateCursor){return new ViewLayouts[viewName](dateCursor)}render(){let className="cal "+this.state.currentView;if(this.state.isWindowNarrowerThanBreakPoint&&this.state.currentView!==Constants.VIEW_DAY)className+="-compact compact";const [header,content]=this.state.viewLayout.getParts(this.state.isWindowNarrowerThanBreakPoint);return $el("div",{className},$el(Modal,{ref:(cmp)=>{this.modal=
cmp}}),$el(Toolbar,{calendarController:this.controller,titleFormatter:this.settings.titleFormatters[this.state.currentView]||null}),header!==null&&$el(header.Component,header.props),$el(content.Component,{grid:content.props.gridGeneratorFn(),currentView:this.state.currentView,calendarController:this.controller}))}}function newController(component){return{get currentView(){return component.state.currentView},get dateCursor(){return component.state.dateCursor},get settings(){return component.settings},
get isCompactViewEnabled(){return component.state.isWindowNarrowerThanBreakPoint},changeView:(to)=>{return component.changeView(to)},openModal:(componentConstruct)=>{component.modal.open(componentConstruct)},closeModal:()=>{component.modal.close()}}}const contentLayerFactory=ioc.contentLayerFactory();var nullcalendar={newCalendar:(el,settings)=>{return ReactDOM.render($el(CalendarLayout,settings?{settings}:undefined),el).getController()},registerContentLayer:(name,Class)=>contentLayerFactory.register(name,
Class),Calendar:CalendarLayout};return nullcalendar});
